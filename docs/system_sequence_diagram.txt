@startuml
title DocAI System Sequence Diagram
header DocAI â€“ End-to-End Flow

autonumber

actor User

participant "Gateway Service" as GS
participant "Master Service" as MS
participant "Ingestion Service" as IS
participant "Storage Srvice" as SS
participant "Database Service" as RDB
participant "Retrieval Service" as RS
participant "Vectorstore Service" as VS
participant "Generation Service" as GGS


'-------------------- Document Ingestion --------------------
group "Document Ingestion"
User -> GS: Upload Raw Document (e.g., PDF)
GS -> MS: Forward Raw Document
MS -> IS: Send Raw Document Data\n(via Message Queue)
activate IS
note right of IS: Create Document Object with metadata:\n{id, file_name, pages, state:"created"}. \nFor tracking purpouses.
IS --> MS: Ack with Minimal Document Object (state:"created")

' Process document: conversion, metadata extraction, and storage
IS -> IS: Process Document (convert to images, generate metadata)
IS -> SS: Store Original PDF & Page Images
activate SS
SS -> IS: Acknowledgment
deactivate SS
IS -> RDB: Persist Detailed Document Object
IS --> MS: Notify Document Processed
note right of MS: Update Document {doc_id} state to "processed"
end

'-------------------- Document Indexing --------------------
group "Document Indexing"
MS -> RS: Initiate Indexing for Processed Document {doc_id}
RS -> SS: Request Page Images for Document {doc_id}
SS --> RS: Return Page Images
RS -> VDB: Generate & Store Embeddings for each page
VDB --> RS: Confirm Embeddings Stored
RS --> MS: Notify Document Indexed
note right of MS: Update Document {doc_id} state to "indexed"
end

'-------------------- Query Ingestion --------------------
group "Query Ingestion"
User -> GS: Submit Query Text
GS -> MS: Forward Raw Query
MS -> IS: Send Raw Query Data\n(via Message Queue)
note right of IS: Create Query Object with metadata:\n{id, text, state:"created"}
IS --> MS: Ack with Query Object (state:"created")
note right of MS: Query {query_id} now in state "created"

' Associate query with available Document IDs
IS -> RDB: Retrieve list of Documents created prior to Query {query_id}
RDB --> IS: Return Document IDs list [doc_id1, doc_id2, ...]
note right of IS: Associate Query {query_id} with these Document IDs

' Process query: enrichment, validations, and persistence
IS -> IS: Process Query Data
IS -> RDB: Persist Detailed Query Object
IS --> MS: Notify Query Processed
note right of MS: Update Query {query_id} state to "processed"


end

'-------------------- Query Indexing --------------------
group "Query Indexing"
MS -> RS: Initiate Indexing for Processed Query {query_id}
RS -> RDB: Request Query Object for {query_id}
RDB --> RS: Return Query Object
RS -> VDB: Generate & Store Embedding for Query
RS --> MS: Notify Query Indexed
VDB --> RS: Confirm Query Embedding Stored
note right of MS: Update Query {query_id} state to "indexed"
end

'-------------------- Context Retrieval --------------------
group "Context Retrieval"
' Verify that all documents associated with the query are in state "indexed"
MS -> RDB: Check states for associated Documents [doc_id1, doc_id2, ...]
RDB --> MS: Return Document States
alt One or more Documents not indexed
note right of MS: Context retrieval blocked due to incomplete document indexing
MS --> GS: Return "Documents processing. Please wait..."
else All Documents are indexed
MS -> RS: Initiate Context Reitrieval for Indexed Query {query_id}
RS -> VDB: Request Similarity Search for Query {query_id}
VDB -> VDB: Perform Similarity Search with indexed documents
note right of VDB: Returns list of relevant Document/Page IDs
VDB --> RS: Return relevant IDs
RS -> RDB: Persist Query Context (retrieved IDs)
RS --> MS: Notify Query Contect Retrieved
note right of MS: Update Query {query_id} state to "context-retrieved"
end
end

'-------------------- Answer Generation --------------------
group "Answer Generation"
MS -> GGS: Initiate Answer Generation for {query_id}
GGS -> RDB: Request Query Object
RDB --> GGS: Return Query
GGS -> SS: Request Page Images for context IDs
SS --> GGS: Return Page Images
GGS -> GGS: Generate Answer using Provided Context
GGS --> MS: Return Generated Answer
note right of MS: Update Query {query_id} state to "answered"
MS --> GS: Forward Final Answer to User
GS --> User: Deliver Generated Answer
end

@enduml
